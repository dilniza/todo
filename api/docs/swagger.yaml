definitions:
  models.ChangePassword:
    properties:
      login:
        type: string
      new_password:
        type: string
      old_password:
        type: string
    type: object
  models.CreateLabelRequest:
    properties:
      color:
        type: string
      name:
        type: string
      user_id:
        type: string
    type: object
  models.CreateTask:
    properties:
      completed:
        type: boolean
      description:
        type: string
      due_date:
        type: string
      task_list_id:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  models.CreateTaskList:
    properties:
      description:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  models.CreateUser:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.GetAllLabelsResponse:
    properties:
      count:
        type: integer
      labels:
        items:
          $ref: '#/definitions/models.Label'
        type: array
    type: object
  models.GetAllTaskListsResponse:
    properties:
      count:
        type: integer
      orders:
        items:
          $ref: '#/definitions/models.GetTaskResponse'
        type: array
    type: object
  models.GetAllUsersResponse:
    properties:
      count:
        type: integer
      customers:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.GetTaskListResponse:
    properties:
      description:
        type: string
      tasks:
        items:
          $ref: '#/definitions/models.GetTaskResponse'
        type: array
      title:
        type: string
    type: object
  models.GetTaskResponse:
    properties:
      completed:
        type: boolean
      created_at:
        type: string
      description:
        type: string
      due_date:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.GetUserTaskListsResponse:
    properties:
      count:
        type: integer
      user_tasklists:
        items:
          $ref: '#/definitions/models.GetTaskListResponse'
        type: array
    type: object
  models.Label:
    properties:
      color:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.Response:
    properties:
      data: {}
      description:
        type: string
      statusCode:
        type: integer
    type: object
  models.Task:
    properties:
      completed:
        type: boolean
      created_at:
        type: string
      description:
        type: string
      due_date:
        type: string
      id:
        type: string
      task_list_id:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.TaskList:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.UpdateLabelRequest:
    properties:
      color:
        type: string
      id:
        type: string
      name:
        type: string
      user_id:
        type: string
    type: object
  models.UpdateTask:
    properties:
      completed:
        type: boolean
      description:
        type: string
      due_date:
        type: string
      id:
        type: string
      task_list_id:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  models.UpdateTaskList:
    properties:
      description:
        type: string
      id:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  models.UpdateUser:
    properties:
      email:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.UserLoginRequest:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  models.UserLoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  models.UserRegisterConfirm:
    properties:
      email:
        type: string
      otp:
        type: string
      user:
        $ref: '#/definitions/models.CreateUser'
    type: object
  models.UserRegisterRequest:
    properties:
      email:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server celler server.
  title: Swagger Example API
  version: "1.0"
paths:
  /label:
    get:
      consumes:
      - application/json
      description: This api gets all labels and returns label list
      parameters:
      - description: Search by name
        in: query
        name: search
        type: string
      - description: Page Number
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllLabelsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: get all labels
      tags:
      - label
    post:
      consumes:
      - application/json
      description: This api creates label and returns label
      parameters:
      - description: Label data
        in: body
        name: label
        required: true
        schema:
          $ref: '#/definitions/models.CreateLabelRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Label'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: create label
      tags:
      - label
  /label/{id}:
    delete:
      consumes:
      - application/json
      description: This api deletes label by its id and returns message
      parameters:
      - description: Label ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: delete label by id
      tags:
      - label
    get:
      consumes:
      - application/json
      description: This api gets label by its id and returns label
      parameters:
      - description: Label ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Label'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: get label by id
      tags:
      - label
    patch:
      consumes:
      - application/json
      description: This api updates label by its id and returns label
      parameters:
      - description: Label ID
        in: path
        name: id
        required: true
        type: string
      - description: Label data
        in: body
        name: label
        required: true
        schema:
          $ref: '#/definitions/models.UpdateLabelRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Label'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: update label by id
      tags:
      - label
  /task:
    post:
      consumes:
      - application/json
      description: This api creates task and returns task
      parameters:
      - description: Task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.CreateTask'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: create task
      tags:
      - task
  /task-list:
    get:
      consumes:
      - application/json
      description: This api gets all task lists and returns task list
      parameters:
      - description: Search by name
        in: query
        name: search
        type: string
      - description: Page Number
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllTaskListsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: get all task lists
      tags:
      - task-list
    post:
      consumes:
      - application/json
      description: This api creates task list and returns task list
      parameters:
      - description: Task List data
        in: body
        name: task-list
        required: true
        schema:
          $ref: '#/definitions/models.CreateTaskList'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TaskList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: create task list
      tags:
      - task-list
  /task-list/{id}:
    delete:
      consumes:
      - application/json
      description: This api deletes task list by its id and returns message
      parameters:
      - description: Task List ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: delete task list by id
      tags:
      - task-list
    get:
      consumes:
      - application/json
      description: This api gets task list by its id and returns task list
      parameters:
      - description: Task List ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetTaskListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: get task list by id
      tags:
      - task-list
    patch:
      consumes:
      - application/json
      description: This api updates task list by its id and returns task list
      parameters:
      - description: Task List ID
        in: path
        name: id
        required: true
        type: string
      - description: Task List data
        in: body
        name: task-list
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTaskList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: update task list by id
      tags:
      - task-list
  /task/{id}:
    delete:
      consumes:
      - application/json
      description: This api deletes task by its id and returns message
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: delete task by id
      tags:
      - task
    get:
      consumes:
      - application/json
      description: This api gets task by its id and returns task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: get task by id
      tags:
      - task
    patch:
      consumes:
      - application/json
      description: This api updates task by its id and returns task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTask'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: update task by id
      tags:
      - task
  /user:
    get:
      consumes:
      - application/json
      description: This api gets all users and returns user list
      parameters:
      - description: Search by name
        in: query
        name: search
        type: string
      - description: Page Number
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: get all users
      tags:
      - user
  /user/:
    patch:
      consumes:
      - application/json
      description: This api changes user password by its login and password and returns
        message
      parameters:
      - description: Change User Password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: user change password
      tags:
      - user
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: This api deletes user by its id and returns message
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: delete user by id
      tags:
      - user
    get:
      consumes:
      - application/json
      description: This api gets user by its id and returns user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: get user by id
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: This api updates user by its id and returns user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: update user by id
      tags:
      - user
  /user/{id}/task-lists:
    get:
      consumes:
      - application/json
      description: This api gets all user's task lists and returns task lists
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Search by name
        in: query
        name: search
        type: string
      - description: Page Number
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUserTaskListsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: get all user's task lists
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: User login
      parameters:
      - description: login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: User login
      tags:
      - auth
  /user/register:
    post:
      consumes:
      - application/json
      description: User register
      parameters:
      - description: register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: User register
      tags:
      - auth
  /user/register-confirm:
    post:
      consumes:
      - application/json
      description: User register
      parameters:
      - description: register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterConfirm'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: User register
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
